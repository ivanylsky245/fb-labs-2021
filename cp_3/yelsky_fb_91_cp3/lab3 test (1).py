#!/usr/bin/env python
# coding: utf-8

# In[104]:


import collections
file=open("/Users/macbook/Library/Mobile Documents/com~apple~TextEdit/Documents/lab3.txt")
text=file.read()
text2="хбтйьнцнюбцвэтйвшлпнрклщяуйычвшлоыезбвацлнэдйвтыявву"
text1="кеюибщаефдфмдкдкролрццисвнуншвйняэшскевдтнюдаобсюсыэихзтмдьлыохунхмьввнсдуэммндтихкеюибщыцязкзхшвносыотнйьщтцншуссянхщлвжвпькшвнмщзфтсхщпддкясввццтнавпьгнуьввйнлхиьерддыцрихэкьзцэижцьехщмсэкжлрибуждэмхимьпьявсттнзцюсфспьузйпдкнхркхульацкчашяьнсибжяксэкццзтчщиюцншумщошяьщкщнфрхуюижсгцыззфрщихзтчщрихнэпозтгфккчщкдмклыоьеынунййлцяьэрхнмкпмдкйыпоиэуныэнсмнмсхэццьедктництндуццоэивупхюфйчсьивйэютнрцшэбвщншуоздкдктнунянккфкяящиссбинкурдцбщшдскрщянщкдкяяищжшсвыьербщяяшндузйнкщнвнгоьцэииспьтуумщщшдекхндуаошдвдеигебуявюсшьйдроццвнфиибжлакццввбвываккчслтьхщзйьцжьбрьецфтспьбишиыовдьезбтнмсэкжллрчсхщьрпьшвшнйьяьнсибжлтьчсйьрьэчтнундулфтснсшбйнбжжцрнмющьккюиеуяэзтьяяреурндуьцоэгкмбобмщкскехюксдцтсывзтмсунйьксщиссшнчщзйьцйнпршьккфкяслркейьйнавпьхсуншнузеумкжлаклцисуьдьбкфипьйнмсуншснхтуйнццмсяьмныонкцркчыоклзфкчпьвныуозрбжлжвцнхщсссцжьбипсрзфкаьихмнщэчсавозулбутнзцнулцзткоццвнфиибхюпвиэислбиювинхыршьивцнярбщфджлзйьцйнзцнулцяьйнвнцхркпрыожврщьянкиюдждкеспьибубиюхщбуакикяеэдакаоццсвлбеилрлвцофкяяышвнунхщлвэкжлтьосцнхщиютнуншнмстспьлйаихщрнньнхшвщшвносчсабьешижсоэосыумщмбриввудябакфурщяэлчяздкаиьечслсосэкццяьцнэлязаьцнхщсссцжььзжлмщунавшьавзтьяюсуйвнакдуюиььяучмпрфдййвдихрнфззфтнхщхиеуяэзтьяыуццыьбьеелфеипвидийдкяязщпупзобчсуьвнлвмьтнчщьеэдвнстйндуаомнщоццвнфиибхюихтоццсввныклрынпьювюсисцйвнихчщлракющчьцнхщбщщйтннсхщдкищьешичщкздукчввзтьяакккйдищжлывьктзихывуллвовявшньсйссцпрыоынчкццяьклхнщэюдриисэкжллреуньыктзшрэчшиязиебчлвацлотнуншнмстспьицшэмвшщкзлоябсчбщшдыцэикзясусйнюйозвьтныэакосжцшншвюийдьяшншвосюсчязиьсунуллвихывхдскклмщубшскуаохщрнрцязакубсчфкяяосгйрщтнгбфдзйьцэибусчжвавмнззфдыоиюшсосюдритьйьнсхщтньцмнрнннстрсосуллвзтвднкцьяубщхичщмщтсчтгнэкхуямйдчщццмнрншвйнввлвацшвьхаврщшнищюиьсщожсюдгнуцрнчзшрынулцхдвмьцнрнуьнцяедьхсцнфуэюосйсчцэидктнуншнмншспьчшвнюдцфвдыоияосунйпщнбкчзиввнмнрьнсибчзлориисэибудкяспнззжлфсчсбкаышнтныьзтпэпьмвзтьсйядуццщщцспрчсэьлвзтклбулцшвюибщыцвивнуйвнакеичмывпвыэдчфкклццсвынуняуумпьшвшрцциссцмючщиюлврлиэйбдцриьцяьввюдаолыфьмодкчьяуфкойнкйдлцыцтнавчзфдыожяшсввдуюизбывщшвныэльидыщубшврчязрщвдойвнвнмщнсунцомюхщньюссттнхщщщфддбтьпнзкьеэдхнщьжвзтфрлцдкяяхьовюсстхщрнпьйнщофкпрынсиулйдццхифсчсхдййрснсерццисшнюсшьсцклтьпвидрошифкяяшнюдаоосунчзфпьцэилцмяэьсцклжшвнунакубакюйтносшнпьявывйнщожсунюэсцэиринкгеэдвэцнпдрщрнчстнввшвпвпьызмбйнвнцхпнуцязьсйядуулрибувдвнщозьгйбчйдсчбщиэбкдктнхщхилвннюсвнщокнирэчрниянцяеьцтсывзтосибфддбпмьлриввеэяьхэфртгрулцузбщшьавтулцибсчннисозфдыожллрдцбщшдскрщиэбквэгвжвзтшвжьаоеитншнпвихэхаорщибясфсчсщьавпьскггыоющлхвииспьвиулбутнзцнулцяьжцюсчвввйимюгвшнщиющюирсунлсгоьрыноьхоццвнфиибкзенуьпьбцрныгщйеуйнзщшьявхщеуеидебупьесузющдкясюэсцэиьцзттнмслдроавежбщяйрщйуюйлцеищьккффдкфьнхчщмщявисчтжьамаофисрябсчшижслбубщэнщфдэмсщябубчзйсанэирщхщмсэктзлэусхщрнляпдгсгцшфдкфьввнкубубяслоюищщшдекщсхдскхсовпннчубакакхуямдкяяхсвнхбжсмкщнщьжвэкссщьккдктнфифсбвбддкястнтнмслдьшсвьцйьшнсиеуюкыщцспрыьлнфкйдщщзйьцйныэвнхбрифкйыунрншьвнбкубьебчсвйнжндуеисхавупмююсшодкльулбусчцнннстрсшншвьхаврщянсцознкссьеуснсмнмснсибссвддцйнчсщнэпозцфибссщщубссвнхбрифкясхщфдцяьклрыоибсчфкщйвносэиэчпнзкццяьклакаолржцяьзтхдицфптнхщыглозфьцэидктнунэибунсхщавьвлващеутнищлрдцбщшдыцйнвнцхдздкицмяьхавьщвуцфьцжьщнмкпмдкяярнэирщввпноулцфрынщхыщмснфжврйвньркзскыщссвнхбрифкясозййцфцнюириьсосйгыовдриклакязеудкяяосузмщчявввнищрилвацшвьичдрщдкикгбмщбущстссвйьшвоейулцгйщщфкнхдкбщщйвнихобсчшибщекбщэюнхзциссичщиютнмслдфишдмбццмсгцшвэрзфвджяжвявшнмсчярщхьовюстымщкзищссыршьудццрреулфщщаефдхссироювяьисшщкзпксчролвтнрицнмскмжяявзтсиюгщхтнмспбмщбущськмюннисдкдкцфжвйьдтмщшвпвкмжяьямщшвжьрефщакиеэдакролфбклцбуябзщбукзунгэщьккгнввшнивжврщрныуоззнбкжлтьбцрныгйснжшдекцгеэюсрсхщньбиулбунхнчйдпнввкцйнуншвэьтнщоьцчсуьсцтгуьйнньосфипьявпьпршьйнлхавьщсиеуобмбмщбущсфрмщчяовупмюосшнкуаохщмсэкццзтбьыьмнжннуыфрыэиьсфсчсщьавозщсосгйлцмктзулынйнуйаихщавиэжьчщоуобмблвыьрнунокпмшрдцбщшддбубихйсансцрбжлвэкхюдрошджсюсунынмсйкмбкзхщхурсунщхввввмдкорыуснчзьяуиюшсвпнкурмщеувирсунсццьблшэннбвамозмщбвскаьшнжьжвупклэчйдищьешиивебпрябакоьзтянщиссйебчввтсзкиющьккбыоскчицпьявицчзивяьочлцсвпдгсуфдкфьяэюдаорибщвчрытнрсбидуаодункющхиьсхдгсунфрлцдкяяакдункчзжсюсбчкнбквьфзтнуноьюддкнхживналбуыодкеиочоьлхэфдкфьпьлннсвнмкхсмщтсывзтьятнакфкпрябйожсюсунюиикцфтсввщбакксйнбжрисцвджцмнщькмыгьяьехщсяюсстхщрнхщбщыцвиклаккзеущнюсияоусчтсйьзткллрццюсстшнюдкшвнгьерынньэьынавэкиютыннькиютноьакеишдщщшвпвмндтихжцшнйнюирсыэьяокпмаобщцсэщбушсхщмсэкссьейпфкясищхнэкмбжлжвннстрсосщэтсяьяубщыцввяфжсюсунтсчтгвмьввьелвмкрюеэзтдцццрнмюхщбуакдожсвнйсзвпьфихщчсяьзтьяйкчзфсчсгэлнцнерссжофкеиябпвистнпвюскиосырынщэгожсгцмефдфмжяосзкццзтпытнрсакьлмщриарзфеуэирибщхиьсуйвнихвнстйнянцуфкщщцсунхдицяедьакхуумжсвнчрлвньзтьяйкчзезьцюсжрыщумьцэиясезьцвнвнунищьеяцпьерынхщщщыцвиьянсибясшнлсиьпвтснфюирыюсцьаккнивжошижсмкарссжозщццесшндцнсккаирсыэокпмщнввйкриаршьлнуьэиулбунхмокздцрнфзфпдкяспнчкхуцфюижсшщязюсшсиэжьввшвяэосрнеелоюисьфиосэщублыунчяюэецчзивяьокхуямщщшдбофдгвмсжкддьяжьяущнввввшнмьвврщозенйсуньейпфкаьтныоеущькхзцнулцзтднчелвпьгцбуавкмлыклтьяуаишдщщмюкеоубщыцвиакэмлхчярщтсчтрьйнвнцхмьакггмщшджсунлххэхьзтлрэчбудкввзнввшнжьжврщунынжвжрццисчцэиаьмчвврщищссркжэжвмндтфрлцяьклхнгцязвэкьзцэиьшсвмдьцюяусиебчдуьешдриезмщюиоуриесввхьовэкжятнмслдзьлсрщйносыклрлврнввлэусхщрнавпьгбубсвйнавдьоспншсмкпрынкчмсхщнкойщщбщшдмефдфмжлрифсбвбддкяяыоввйнщцыгевввйьмэоьжйвнакеиэчпьидфккнйкрижэпншнхщынгспнунрнгошддкяяфсшьыоарфдрижлццэччсавпьзншвйнрнкизфтсиспьнкгбмщбущссцшнмьввьщянмсхмдктнянккбщшдекццжлывйквэпншнхщынгспныэрнгошддкйыявзтцнюфввовявлиьцяьокпмаишнмнээхфкччтхдицивьспьгсунмщпвюдцфюирыусунлрлцдкяяыуаокнввпьфзлцвнстбвхщщслэмдчзоулыфьтглозфьцэидкнхпрынкчмстспьвифщгбрыяьцщжлзфпреурндцвныкмбарбуябакфккчявпвлсзврщьяшнынйнмьунжкиюхщлвхщпэжвчспьпрццсвпддктндклцнулцмклытсющшдекццзтиэярчсжвюсстибдцньтсюсстхщээрщьечщкзмщрнтслкеурьйомюхщньюссттнулбуввзнтснфчзццзтвииярщьякбньависйщкзхщхуиюшннуяетнхщюиакфккчлспьыопьрцмнрншбынлсюдризьяуфкшдвчсксчавзтрщхсщв"
file.close()
chasti_bigrami_v_rus = ["ст", "но", "то", "на", "ен"]
alphabet = ['а', 'б', 'в', 'г', 'д', 'е', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х','ц','ч','ш','щ', 'ь', 'ы', 'э', 'ю', 'я']
        
bigram2=[]

for j in range(0, len(text1)-2,2):
    bigram2.append(text1[j]+text1[j+1])

bigram2=dict(collections.Counter(bigram2))


sorted_bigrams= dict(sorted(bigram2.items(), key=lambda item: item[1], reverse=True))
chasti5_bigrami= list(sorted_bigrams)[:5]
print(chasti5_bigrami)

print(bigram2)

    


# In[ ]:





# In[105]:


def gcdExtended(a, b):
    if b == 0:  
        return a, 1, 0
    else:
        d, x, y = gcdExtended(b, a % b)
        return d, y, x - y * (a // b)
    
def pop_reverse_element(a,mod):
    return gcdExtended(a,mod)[1]%mod

print(gcdExtended(16,4)[0])


# In[106]:


n=len(alphabet)
def transofm_bigram_into_number(bi):
    return (alphabet.index(bi[0])*n+alphabet.index(bi[1]))% n ** 2
print(transofm_bigram_into_number('вн'))


# In[107]:


def linini_rivninia(a,b,modul):
    rezulta=[]
    if (a==0 and b==0):
        return"bezlich_rozviazkiv"
    if (a == 0 and b != 0):
        return None
    if (a!=0):
        k=gcdExtended(a,modul)[0]
        if k==1 :
            return pop_reverse_element(b,modul)*a
        elif k>1:
            if b%k == 0:
                a1 = a/k
                b1 = a/k
                mod1 = modul/k
                temporary_rezult = []
                print ("loolo")
                for i in range(0,k):
                    temporary_rezult.append((pop_reverse_element(a1,mod1)*b1+i*mod1)%modul)
                return temporary_rezult
            else:
                return None

print(linini_rivninia(8,16,32))

list_num_of_bi_rus=[]
list_num_of_bi_text=[]

for i in range(0,5):
    list_num_of_bi_rus.append(transofm_bigram_into_number( chasti_bigrami_v_rus[i]))
    
for i in range(0,5):
    list_num_of_bi_text.append(transofm_bigram_into_number( chasti5_bigrami[i]))



import itertools
x_y = list(itertools.product(list_num_of_bi_rus,list_num_of_bi_text ))
x1_y1_x2_y2 = list(itertools.product(x_y ,x_y ))


print(x1_y1_x2_y2)





    






                


# In[89]:


print(list_num_of_bi_rus)
print(list_num_of_bi_text)


# In[108]:


x1=x1_y1_x2_y2[0][0]
print(x1[0])


# In[114]:



def a_key(X1,Y1,X2,Y2,mod):
    x = X1-X2
    y = Y1-Y2
    a = x*pop_reverse_element(y,mod**2)%mod**2
    if a!= 'infinity' and a!=None:
        return pop_reverse_element(a,(mod**2))
    else:
        return None

print(a_value(417,899,168,903,31))

def b_key(y,x,a,modul):
    if a!= None:
        b = (y - a*x)%(modul**2)
        return b 
    else:
        return None 
    


# In[92]:


key_pair=[]
for i in x1_y1_x2_y2:
    a=a_key(i[0][0],i[0][1],i[1][0],i[1][1],len(alphabet))
    b=b_key(i[0][1],i[0][0],a,len(alphabet))
    key_pair.append([a,b])



def key_sort(keys):
    wrong_keys=[]
    for i in range(0,len(keys)):
        for g in range(0,len(keys)):
            if keys[i]!=keys[g]:
                continue
            
    return wrong_keys

                    
key_pair
       


# In[112]:


def avto_rozpiznavach(text):
    if text[0] == 'ы' or text[0] == 'ь':
        return False
    golosni = ['о','а','е','и','у','ы']
    prigolosni = ['б','в','г','д','ж','з','й','к','л','м','н','п','р','с','т','ф','х','ц','ч','ш','щ']
    raund = 0
    for i in range (0, 50):
        if text[i] == 'ь' and (text[i+1] in golosni or text[i-1] in golosni):
            return False
        if text[i]==text[i+1] and text[i+1]==text[i+2]:
            return False
        if text[i] in prigolosni and text[i+1] in prigolosni and text[i+2] in prigolosni and text[i+3] in prigolosni and text[i+4] in prigolosni:
            return False
        if text[i] in prigolosni and text[i+1] in  prigolosni and text[i+2] in  prigolosni and text[i+3] in  prigolosni:    
            raund = raund+1
            if raund == 4:
                return False
    return True
                   


# In[ ]:





# In[113]:


def decypher(text,keys):
    m=len(alphabet)
    decrypt_text = []
    a =keys[0]
    b =keys[1]
    for i in range(0, len(text), 2):
        x = (pop_reverse_element(a, m ** 2) * (transofm_bigram_into_number(text[i:i + 2]) - b)) % (m ** 2)
        decrypt_text.append(alphabet[x // m] + alphabet[x % m])
    return ''.join(i for i in decrypt_text)


 
txt=[]
for key in key_pair:
    if key[0]!=0:
        txt.append(decypher(text1,key))



for t in txt:
    if avto_rozpiznavach(t):
        print(t,'\n')

    


# In[ ]:






# In[ ]:


print(check(decrypt(text1,key_pair)))


# In[ ]:


for i in range(0,len(key_pair)):
       print(key_pair[i])
   


# In[ ]:





# In[ ]:




